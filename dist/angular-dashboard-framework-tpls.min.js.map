{"version":3,"sources":["adf.js","adf.locale.js","column.js","dashboard.js","dialog-bootstrap.js","dialog-material.js","locale-constant.js","order-by-object-key.js","provider.js","row.js","structure-preview.js","widget-content.js","widget-service.js","widget.js","angular-dashboard-framework.tpl.js","angular-dashboard-framework-tpls.js"],"names":["window","undefined","angular","module","value","directive","$log","$compile","$rootScope","adfTemplatePath","rowTemplate","dashboard","moveWidgetInColumn","$scope","column","evt","widgets","$apply","splice","newIndex","oldIndex","$broadcast","findWidget","index","widget","i","length","w","idEquals","wid","findColumn","model","rows","r","j","columns","c","cid","getId","el","id","getAttribute","addWidgetToColumn","targetColumn","from","sourceColumn","item","warn","removeWidgetFromColumn","applySortable","$element","sortable","Sortable","create","group","handle","ghostClass","animation","onAdd","onRemove","onUpdate","on","destroy","restrict","replace","scope","editMode","continuousEditMode","adfModel","options","templateUrl","link","col","isDefined","isArray","cloned","append","$timeout","$document","dialogService","stringToBoolean","string","toLowerCase","Boolean","copyWidgets","source","target","shift","push","fillStructure","root","counter","forEach","row","isUndefined","readColumns","changeStructure","structure","copy","createConfiguration","type","cfg","config","findFirstWidgetColumn","error","addNewWidgetToModel","name","unshift","split","object","size","arr","key","createCategories","categories","category","transclude","collapsible","editable","maximizable","adfWidgetFilter","titleTemplateUrl","editTemplateUrl","controller","getNewModalScope","$new","translate","widgetFilter","structureName","$watch","oldVal","newVal","structures","editClass","toggleEditMode","modelCopy","$on","collapseAll","collapseExpandStatus","cancelEditMode","editDashboardDialog","editDashboardScope","adfEditTemplatePath","open","backdrop","parent","element","body","applyDialog","close","$destroy","cancelDialog","addWidgetDialog","addScope","isFunction","selectedWidgets","adfAddTemplatePath","addTemplateUrl","opts","addWidget","removeWidget","widgetCount","closeDialog","$attr","enableConfirmDelete","factory","$uibModal","instance","dialog","fn","$mdDialog","show","hide","constant","defaultLocale","frameworkLocales","en-GB","ADF_COMMON_CLOSE","ADF_COMMON_DELETE","ADF_COMMON_TITLE","ADF_COMMON_CANCEL","ADF_COMMON_APPLY","ADF_COMMON_EDIT_DASHBOARD","ADF_EDIT_DASHBOARD_STRUCTURE_LABEL","ADF_DASHBOARD_TITLE_TOOLTIP_ADD","ADF_DASHBOARD_TITLE_TOOLTIP_SAVE","ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE","ADF_DASHBOARD_TITLE_TOOLTIP_UNDO","ADF_WIDGET_ADD_HEADER","ADF_WIDGET_DELETE_CONFIRM_MESSAGE","ADF_WIDGET_TOOLTIP_REFRESH","ADF_WIDGET_TOOLTIP_MOVE","ADF_WIDGET_TOOLTIP_COLLAPSE","ADF_WIDGET_TOOLTIP_EXPAND","ADF_WIDGET_TOOLTIP_EDIT","ADF_WIDGET_TOOLTIP_FULLSCREEN","ADF_WIDGET_TOOLTIP_REMOVE","sv-SE","filter","$filter","array","objectKey","provider","adfLocale","getLocales","locales","getActiveLocale","activeLocale","label","translation","widgetsPath","messageTemplate","loadingTemplate","customWidgetTemplatePath","defaultApplyFunction","this","extend","reload","frameless","edit","immediate","apply","path","template","templatePath","setLocale","locale","Error","addLocale","translations","isString","isObject","$get","Date","getTime","other","toString","columnTemplate","adjustRowHeight","container","height","style","prepareStructure","preview","selected","$q","widgetService","$controller","$injector","renderError","msg","html","compileWidget","currentScope","content","newScope","renderWidget","templateScope","base","resolvers","$tpl","getTemplate","resolve","promise","get","invoke","all","then","locals","resolveAs","templateCtrl","controllerAs","children","data","contents","reason","$http","$sce","$templateCache","parseUrl","url","parsedUrl","indexOf","substring","exposed","deferred","defer","tpl","getTrustedResourceUrl","success","response","put","reject","preLink","definition","footerTemplateUrl","styleClass","fromJson","widgetState","isCollapsed","collapsed","debug","postLink","deleteWidget","remove","deleteScope","deleteTemplateUrl","deleteDialog","createApplyPromise","result","when","editScope","saveDialog","validationError","applyFn","title","err","event","args","widgetClasses","classes","openFullScreen","fullScreenScope","modalSize","windowClass","compile","pre","post","run"],"mappings":"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","file":"angular-dashboard-framework-tpls.min.js","sourcesContent":["/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n\nangular.module('adf.core', ['adf.provider', 'adf.locale'])\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n  .value('adfVersion', '<<adfVersion>>');\n\nangular.module('adf', ['adf.core', 'ui.bootstrap', 'adf.dialog.bootstrap'])\n  .value('adfTemplatePath', '../src/templates/');\n\nangular.module('adf.material', ['adf.core', 'ngMaterial', 'adf.dialog.ngMaterial'])\n  .value('adfTemplatePath', '../src/templates/material/');","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf.locale', [])\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf.core')\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    'use strict';\n\n    /**\n     * moves a widget in between a column\n     */\n    function moveWidgetInColumn($scope, column, evt){\n      var widgets = column.widgets;\n      // move widget and apply to scope\n      $scope.$apply(function(){\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\n      });\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (dashboard.idEquals(w.wid,index)){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if (dashboard.idEquals(c.cid, index)){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the adf id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('adf-id');\n      return id ? id : '-1';\n    }\n\n    /**\n     * adds a widget to a column\n     */\n    function addWidgetToColumn($scope, model, targetColumn, evt){\n      // find source column\n      var cid = getId(evt.from);\n      var sourceColumn = findColumn(model, cid);\n\n      if (sourceColumn){\n        // find moved widget\n        var wid = getId(evt.item);\n        var widget = findWidget(sourceColumn, wid);\n\n        if (widget){\n          // add new item and apply to scope\n          $scope.$apply(function(){\n            if (!targetColumn.widgets) {\n              targetColumn.widgets = [];\n            }\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\n\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n          });\n        } else {\n          $log.warn('could not find widget with id ' + wid);\n        }\n      } else {\n        $log.warn('could not find column with id ' + cid);\n      }\n    }\n\n    /**\n     * removes a widget from a column\n     */\n    function removeWidgetFromColumn($scope, column, evt){\n      // remove old item and apply to scope\n      $scope.$apply(function(){\n        column.widgets.splice(evt.oldIndex, 1);\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n      });\n    }\n\n    /**\n     * enable sortable\n     */\n    function applySortable($scope, $element, model, column){\n      // enable drag and drop\n      var el = $element[0];\n      var sortable = Sortable.create(el, {\n        group: 'widgets',\n        handle: '.adf-move',\n        ghostClass: 'placeholder',\n        animation: 150,\n        onAdd: function(evt){\n          addWidgetToColumn($scope, model, column, evt);\n        },\n        onRemove: function(evt){\n          removeWidgetFromColumn($scope, column, evt);\n        },\n        onUpdate: function(evt){\n          moveWidgetInColumn($scope, column, evt);\n        }\n      });\n\n      // destroy sortable on column destroy event\n      $element.on('$destroy', function () {\n        // check sortable element, before calling destroy\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\n        if (sortable.el){\n          sortable.destroy();\n        }\n      });\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid){\n          col.cid = dashboard.id();\n        }\n\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\n          $compile(rowTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        } else {\n          // enable drag and drop for widget only columns\n          applySortable($scope, $element, $scope.adfModel, col);\n        }\n      }\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf.core')\n  .directive('adfDashboard', function ($rootScope, $log, $timeout, $document, dialogService, dashboard, adfTemplatePath) {\n    'use strict';\n\n    function stringToBoolean(string){\n      switch(angular.isDefined(string) ? string.toLowerCase() : null){\n        case 'true': case 'yes': case '1': return true;\n        case 'false': case 'no': case '0': case null: return false;\n        default: return Boolean(string);\n      }\n    }\n\n    function copyWidgets(source, target) {\n      if ( source.widgets && source.widgets.length > 0 ){\n        var w = source.widgets.shift();\n        while (w){\n          target.widgets.push(w);\n          w = source.widgets.shift();\n        }\n      }\n    }\n\n    /**\n    * Copy widget from old columns to the new model\n    * @param object root the model\n    * @param array of columns\n    * @param counter\n    */\n    function fillStructure(root, columns, counter) {\n      counter = counter || 0;\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (column) {\n            // if the widgets prop doesn't exist, create a new array for it.\n            // this allows ui.sortable to do it's thing without error\n            if (!column.widgets) {\n              column.widgets = [];\n            }\n\n            // if a column exist at the counter index, copy over the column\n            if (angular.isDefined(columns[counter])) {\n              // do not add widgets to a column, which uses nested rows\n              if (angular.isUndefined(column.rows)){\n                copyWidgets(columns[counter], column);\n                counter++;\n              }\n            }\n\n            // run fillStructure again for any sub rows/columns\n            counter = fillStructure(column, columns, counter);\n          });\n        });\n      }\n      return counter;\n    }\n\n    /**\n    * Read Columns: recursively searches an object for the 'columns' property\n    * @param object model\n    * @param array  an array of existing columns; used when recursion happens\n    */\n    function readColumns(root, columns) {\n      columns = columns || [];\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (col) {\n            columns.push(col);\n            // keep reading columns until we can't any more\n            readColumns(col, columns);\n          });\n        });\n      }\n\n      return columns;\n    }\n\n    function changeStructure(model, structure){\n      var columns = readColumns(model);\n      var counter = 0;\n\n      model.rows = angular.copy(structure.rows);\n\n      while ( counter < columns.length ){\n        counter = fillStructure(model, columns, counter);\n      }\n    }\n\n    function createConfiguration(type){\n      var cfg = {};\n      var config = dashboard.widgets[type].config;\n      if (config){\n        cfg = angular.copy(config);\n      }\n      return cfg;\n    }\n\n    /**\n     * Find first widget column in model.\n     *\n     * @param dashboard model\n     */\n    function findFirstWidgetColumn(model){\n      var column = null;\n      if (!angular.isArray(model.rows)){\n        $log.error('model does not have any rows');\n        return null;\n      }\n      for (var i=0; i<model.rows.length; i++){\n        var row = model.rows[i];\n        if (angular.isArray(row.columns)){\n          for (var j=0; j<row.columns.length; j++){\n            var col = row.columns[j];\n            if (!col.rows){\n              column = col;\n              break;\n            }\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * Adds the widget to first column of the model.\n     *\n     * @param dashboard model\n     * @param widget to add to model\n     * @param name name of the dashboard\n     */\n    function addNewWidgetToModel(model, widget, name){\n      if (model){\n        var column = findFirstWidgetColumn(model);\n        if (column){\n          if (!column.widgets){\n            column.widgets = [];\n          }\n          column.widgets.unshift(widget);\n\n          // broadcast added event\n          $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n        } else {\n          $log.error('could not find first widget column');\n        }\n      } else {\n        $log.error('model is undefined');\n      }\n    }\n\n    /**\n     * Checks if the edit mode of the widget should be opened immediately.\n     *\n     * @param widget type\n     */\n    function isEditModeImmediate(type){\n      var widget = dashboard.widgets[type];\n      return widget && widget.edit && widget.edit.immediate;\n    }\n\n    /**\n     * Opens the edit mode of the specified widget.\n     *\n     * @param dashboard scope\n     * @param widget\n     */\n    function openEditMode($scope, widget){\n      // wait some time before fire enter edit mode event\n      $timeout(function(){\n        $scope.$broadcast('adfWidgetEnterEditMode', widget);\n      }, 200);\n    }\n\n    /**\n     * Splits an object into an array multiple objects inside.\n     *\n     * @param object source object\n     * @param size size of array\n     *\n     * @return array of splitted objects\n     */\n    function split(object, size) {\n      var arr = [];\n      var i = 0;\n      angular.forEach(object, function(value, key){\n        var index = i++ % size;\n        if (!arr[index]){\n          arr[index] = {};\n        }\n        arr[index][key] = value;\n      });\n      return arr;\n    }\n\n    /**\n     * Creates object with the category name as key and an array of widgets as value.\n     *\n     * @param widgets array of widgets\n     *\n     * @return array of categories\n     */\n    function createCategories(widgets){\n      var categories = {};\n      angular.forEach(widgets, function(widget, key){\n        var category = widget.category;\n        // if the widget has no category use a default one\n        if (!category){\n          category = 'Miscellaneous';\n        }\n        // push widget to category array\n        if (angular.isUndefined(categories[category])){\n          categories[category] = {widgets: {}};\n        }\n        categories[category].widgets[key] = widget;\n      });\n      return categories;\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude : false,\n      scope: {\n        structure: '@',\n        name: '@',\n        collapsible: '@',\n        editable: '@',\n        editMode: '@',\n        continuousEditMode: '=',\n        maximizable: '@',\n        adfModel: '=',\n        adfWidgetFilter: '=',\n        categories: '@',\n        titleTemplateUrl: '@',\n        editTemplateUrl: '@'\n      },\n      controller: function($scope){\n        var model = {};\n        var structure = {};\n        var widgetFilter = null;\n        var structureName = {};\n        var name = $scope.name;\n\n        // Watching for changes on adfModel\n        $scope.$watch('adfModel', function(oldVal, newVal) {\n          // has model changed or is the model attribute not set\n          if (newVal !== null || (oldVal === null && newVal === null)) {\n            model = $scope.adfModel;\n            widgetFilter = $scope.adfWidgetFilter;\n            if ( ! model || ! model.rows ){\n              structureName = $scope.structure;\n              structure = dashboard.structures[structureName];\n              if (structure){\n                if (model){\n                  model.rows = angular.copy(structure).rows;\n                } else {\n                  model = angular.copy(structure);\n                }\n                model.structure = structureName;\n              } else {\n                $log.error( 'could not find structure ' + structureName);\n              }\n            }\n\n            if (model) {\n              if ($scope.options.titleTemplateUrl) {\n                model.titleTemplateUrl = $scope.options.titleTemplateUrl;\n              } else if (!model.titleTemplateUrl) {\n                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n              }\n              $scope.model = model;\n            } else {\n              $log.error('could not find or create model');\n            }\n          }\n        }, true);\n\n        // edit mode\n        $scope.editMode = false;\n        $scope.editClass = '';\n\n        //passs translate function from dashboard so we can translate labels inside html templates\n        $scope.translate = dashboard.translate;\n\n        function getNewModalScope() {\n          var scope = $scope.$new();\n          //pass translate function to the new scope so we can translate the labels inside the modal dialog\n          scope.translate = dashboard.translate;\n          return scope;\n        }\n\n        $scope.toggleEditMode = function(){\n          $scope.editMode = ! $scope.editMode;\n          if ($scope.editMode){\n            if (!$scope.continuousEditMode) {\n              $scope.modelCopy = angular.copy($scope.adfModel, {});\n              $rootScope.$broadcast('adfIsEditMode');\n            }\n          }\n\n          if (!$scope.editMode){\n            $rootScope.$broadcast('adfDashboardChanged', name, model);\n          }\n        };\n\n        $scope.$on('adfToggleEditMode', function() {\n            $scope.toggleEditMode();\n        });\n\n        $scope.collapseAll = function(collapseExpandStatus){\n          $rootScope.$broadcast('adfDashboardCollapseExpand',{collapseExpandStatus : collapseExpandStatus});\n        };\n\n        $scope.cancelEditMode = function(){\n          $scope.editMode = false;\n          if (!$scope.continuousEditMode) {\n            $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n          }\n          $rootScope.$broadcast('adfDashboardEditsCancelled');\n        };\n\n        // edit dashboard settings\n        $scope.editDashboardDialog = function(){\n          var editDashboardScope = getNewModalScope();\n          // create a copy of our model to avoid changing the settings\n          // if we cancel without saving.\n          editDashboardScope.copy = angular.copy(model);\n\n          // pass dashboard structure to scope\n          editDashboardScope.structures = dashboard.structures;\n\n          // pass split function to scope, to be able to display structures in multiple columns\n          editDashboardScope.split = split;\n\n          var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n          if ($scope.options.editTemplateUrl) {\n            adfEditTemplatePath = $scope.options.editTemplateUrl;\n          } else if (model.editTemplateUrl) {\n            adfEditTemplatePath = model.editTemplateUrl;\n          }\n\n          dialogService.open({\n            controller: function() {},\n            scope: editDashboardScope,\n            templateUrl: adfEditTemplatePath,\n            backdrop: 'static',\n            size: 'lg',\n            parent: angular.element($document.body)\n          });\n          editDashboardScope.changeStructure = function(name, structure) {\n            if (!name) {\n              name = editDashboardScope.model.structure;\n            }\n            if (!structure) {\n              structure = editDashboardScope.structures[name];\n            }\n            changeStructure(editDashboardScope.model, structure);\n            if (model.structure !== name){\n              model.structure = name;\n            }\n          };\n          editDashboardScope.applyDialog = function(){\n            dialogService.close(function() {\n              // copy the new settings back to the model\n              angular.copy(editDashboardScope.copy, model);\n              // close modal and destroy the scope\n              editDashboardScope.$destroy();\n            });\n          };\n          editDashboardScope.cancelDialog = function(){\n            dialogService.close(function() {\n              // close modal and destroy the scope without saving our changes\n              editDashboardScope.$destroy();\n            });\n          };\n        };\n\n        // add widget dialog\n        $scope.addWidgetDialog = function(){\n          var addScope = getNewModalScope();\n          var model = $scope.model;\n          var widgets;\n          if (angular.isFunction(widgetFilter)){\n            widgets = {};\n            angular.forEach(dashboard.widgets, function(widget, type){\n              if (widgetFilter(widget, type, model)){\n                widgets[type] = widget;\n              }\n            });\n          } else {\n            widgets = dashboard.widgets;\n          }\n          addScope.widgets = widgets;\n\n          //pass translate function to the new scope so we can translate the labels inside the modal dialog\n          addScope.translate = $scope.translate;\n\n          // Key-value store to keep track of # of each widget we want to add\n          addScope.selectedWidgets = {};\n\n          // pass createCategories function to scope, if categories option is enabled\n          if ($scope.options.categories){\n            $scope.createCategories = createCategories;\n          }\n\n          var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n          if(model.addTemplateUrl) {\n            adfAddTemplatePath = model.addTemplateUrl;\n          }\n\n          var opts = {\n            scope: addScope,\n            templateUrl: adfAddTemplatePath,\n            backdrop: 'static'\n          };\n\n          dialogService.open(opts);\n          addScope.addWidget = function(widget){\n\n            if (addScope.selectedWidgets[widget]) {\n              addScope.selectedWidgets[widget]++;\n            } else {\n              addScope.selectedWidgets[widget] = 1;\n            }\n          };\n          addScope.removeWidget = function(widget) {\n            if (addScope.selectedWidgets[widget]) {\n              addScope.selectedWidgets[widget]--;\n            } else {\n              addScope.selectedWidgets[widget] = 0;\n            }\n          };\n          addScope.applyDialog = function(){\n            angular.forEach(addScope.selectedWidgets, function(widgetCount, widget) {\n              for (var i = 0; i < widgetCount; i++) {\n                var w = {\n                  type: widget,\n                  config: createConfiguration(widget)\n                }; \n                addNewWidgetToModel(model, w, name);\n              }\n            });\n\n            // close and destroy\n            dialogService.close(function() {\n              addScope.$destroy();\n            });\n          };\n          addScope.closeDialog = function(){\n            // close and destroy\n            dialogService.close(function() {\n              addScope.$destroy();\n            });\n          };\n        };\n\n        $scope.addNewWidgetToModel = addNewWidgetToModel;\n      },\n      link: function ($scope, $element, $attr) {\n        // pass options to scope\n        var options = {\n          name: $attr.name,\n          editable: true,\n          enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\n          maximizable: stringToBoolean($attr.maximizable),\n          collapsible: stringToBoolean($attr.collapsible),\n          categories: stringToBoolean($attr.categories),\n          titleTemplateUrl: $attr.titleTemplateUrl,\n          editTemplateUrl: $attr.editTemplateUrl\n        };\n        if (angular.isDefined($attr.editable)){\n          options.editable = stringToBoolean($attr.editable);\n        }\n        $scope.options = options;\n      },\n      templateUrl: adfTemplatePath + 'dashboard.html'\n    };\n  });\n","angular.module('adf.dialog.bootstrap', ['ui.bootstrap'])\n  .factory('dialogService', function($uibModal) {\n    'use strict';\n    var dialog = {};\n    var instance;\n    dialog.open = function(options) {\n      instance = $uibModal.open(options);\n    };\n    dialog.close = function(fn) {\n      fn();\n      instance.close();\n    }\n    return dialog;\n});","angular.module('adf.dialog.ngMaterial', ['ngMaterial'])\n  .factory('dialogService', function($mdDialog) {\n    'use strict';\n    var dialog = {};\n    dialog.open = function(options) {\n      $mdDialog.show(options);\n    };\n    dialog.close = function(fn) {\n      fn();\n      $mdDialog.hide();\n    }\n    return dialog;\n});","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n'use strict';\n\n/**\n* @ngdoc object\n* @name adf.locale#adfLocale\n* @description\n*\n* Holds settings and values for framework supported locales\n*/\nangular.module('adf.locale')\n.constant('adfLocale',\n  {\n    defaultLocale: 'en-GB',\n    frameworkLocales: {\n      'en-GB': {\n        ADF_COMMON_CLOSE: 'Close',\n        ADF_COMMON_DELETE: 'Delete',\n        ADF_COMMON_TITLE: 'Title',\n        ADF_COMMON_CANCEL: 'Cancel',\n        ADF_COMMON_APPLY: 'Apply',\n        ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\n        ADF_WIDGET_ADD_HEADER: 'Add new widget',\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\n        ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\n        ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget'\n      },\n      'sv-SE': {\n        ADF_COMMON_CLOSE: 'Stäng',\n        ADF_COMMON_DELETE: 'Ta bort',\n        ADF_COMMON_TITLE: 'Titel',\n        ADF_COMMON_CANCEL: 'Avbryt',\n        ADF_COMMON_APPLY: 'Använd',\n        ADF_COMMON_EDIT_DASHBOARD: 'Redigera dashboard',\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Struktur',\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Lägg till ny widget',\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Spara förändringar',\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Slå på redigeringsläge',\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Ångra förändringar',\n        ADF_WIDGET_ADD_HEADER: 'Lägg till ny widget',\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Är du säker på att du vill ta bort denna widget ?',\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Ladda om widget',\n        ADF_WIDGET_TOOLTIP_MOVE: 'Ändra widgets position',\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Stäng widget',\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Öppna widget',\n        ADF_WIDGET_TOOLTIP_EDIT: 'Ändra widget konfigurering',\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Visa widget i fullskärm',\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Ta bort widget'\n      }\n    }\n  }\n);\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf.core')\n  .filter('adfOrderByObjectKey', function($filter) {\n    'use strict';\n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', ['adf.locale'])\n  .provider('dashboard', function(adfLocale){\n\n    var widgets = {};\n    var widgetsPath = '';\n    var structures = {};\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n    var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\">loading ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n    var customWidgetTemplatePath = null;\n\n    // default apply function of widget.edit.apply\n    var defaultApplyFunction = function(){\n      return true;\n    };\n\n    var activeLocale = adfLocale.defaultLocale;\n    var locales = adfLocale.frameworkLocales;\n\n    function getLocales() {\n      return locales;\n    }\n\n    function getActiveLocale() {\n      return activeLocale;\n    }\n\n    function translate(label) {\n      var translation = locales[activeLocale][label];\n      return translation ? translation : label;\n    }\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#widget\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new widget.\n    *\n    * @param {string} name of the widget\n    * @param {object} widget to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `title` - `{string=}` - The title of the widget.\n    *   - `description` - `{string=}` - Description of the widget.\n    *   - `category` - `{string=}` - Category of the widget.\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n    *   - `config` - `{object}` - Predefined widget configuration.\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\n    *      associated with newly created scope of the widget or the name of a\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n    *      if passed as a string.\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n    *   - `template` - `{string=|function()=}` - html template as a string.\n    *   - `templateUrl` - `{string=}` - path to an html template.\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the widget\n    *      will wait for them all to be resolved or one to be rejected before the controller is\n    *      instantiated.\n    *      If all the promises are resolved successfully, the values of the resolved promises are\n    *      injected.\n    *\n    *      The map object is:\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n    *        and the return value is treated as the dependency. If the result is a promise, it is\n    *        resolved before its value is injected into the controller.\n    *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n    *      on the scope of the widget.\n    *   - `edit` - `{object}` - Edit modus of the widget.\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n    *        on the scope of the widget.\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n    *        Default is true.\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n    *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n    *        The function have to return a boolean or an promise which can be resolved to a boolean.\n    *        The function can use injection.\n    *\n    * @returns {Object} self\n    */\n    this.widget = function(name, widget){\n      var w = angular.extend({reload: false, frameless: false}, widget);\n      if ( w.edit ){\n        var edit = {\n          reload: true,\n          immediate: false,\n          apply: defaultApplyFunction\n        };\n        angular.extend(edit, w.edit);\n        w.edit = edit;\n      }\n      widgets[name] = w;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#widgetsPath\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Sets the path to the directory which contains the widgets. The widgets\n     * path is used for widgets with a templateUrl which contains the\n     * placeholder {widgetsPath}. The placeholder is replaced with the\n     * configured value, before the template is loaded, but the template is\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n     * The default value of widgetPaths is ''.\n     *\n     *\n     * @param {string} path to the directory which contains the widgets\n     *\n     * @returns {Object} self\n     */\n    this.widgetsPath = function(path){\n      widgetsPath = path;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#structure\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new structure.\n    *\n    * @param {string} name of the structure\n    * @param {object} structure to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n    *     - `styleClass` - `{string}` - CSS Class of the row.\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\n    *       - `styleClass` - `{string}` - CSS Class of the column.\n    *\n    * @returns {Object} self\n    */\n    this.structure = function(name, structure){\n      structures[name] = structure;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#messageTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template for messages.\n    *\n    * @param {string} template for messages.\n    *\n    * @returns {Object} self\n    */\n    this.messageTemplate = function(template){\n      messageTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#loadingTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template which is displayed as\n    * long as the widget resources are not resolved.\n    *\n    * @param {string} template loading template\n    *\n    * @returns {Object} self\n    */\n    this.loadingTemplate = function(template){\n      loadingTemplate = template;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#customWidgetTemplatePath\n     * @propertyOf adf.dashboardProvider\n     * @description\n     *\n     * Changes the container template for the widgets\n     *\n     * @param {string} path to the custom widget template\n     *\n     * @returns {Object} self\n     */\n    this.customWidgetTemplatePath = function(templatePath) {\n      customWidgetTemplatePath = templatePath;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#setLocale\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Changes the locale setting of adf\n     *\n     * @param {string} ISO Language Code\n     *\n     * @returns {Object} self\n     */\n     this.setLocale = function(locale){\n       if(locales[locale]) {\n         activeLocale = locale;\n       } else {\n         throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\n       }\n       return this;\n     };\n\n     /**\n      * @ngdoc method\n      * @name adf.dashboardProvider#addLocale\n      * @methodOf adf.dashboardProvider\n      * @description\n      *\n      * Adds a new locale to adf\n      *\n      * @param {string} ISO Language Code for the new locale\n      * @param {object} translations for the locale.\n      *\n      * @returns {Object} self\n      */\n      this.addLocale = function(locale, translations){\n        if(!angular.isString(locale)) {\n          throw new Error('locale must be an string');\n        }\n\n        if(!angular.isObject(translations)) {\n          throw new Error('translations must be an object');\n        }\n\n        locales[locale] = translations;\n        return this;\n      };\n\n   /**\n    * @ngdoc service\n    * @name adf.dashboard\n    * @description\n    *\n    * The dashboard holds all options, structures and widgets.\n    *\n    * @property {Array.<Object>} widgets Array of registered widgets.\n    * @property {string} widgetsPath Default path for widgets.\n    * @property {Array.<Object>} structures Array of registered structures.\n    * @property {string} messageTemplate Template for messages.\n    * @property {string} loadingTemplate Template for widget loading.\n    * @property {method} sets locale of adf.\n    * @property {Array.<Object>} hold all of the locale translations.\n    * @property {string} the active locale setting.\n    * @property {method} translation function passed to templates.\n    *\n    * @returns {Object} self\n    */\n    this.$get = function(){\n      var cid = 0;\n\n      return {\n        widgets: widgets,\n        widgetsPath: widgetsPath,\n        structures: structures,\n        messageTemplate: messageTemplate,\n        loadingTemplate: loadingTemplate,\n        setLocale: this.setLocale,\n        locales: getLocales,\n        activeLocale: getActiveLocale,\n        translate: translate,\n        customWidgetTemplatePath: customWidgetTemplatePath,\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#id\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Creates an ongoing numeric id. The method is used to create ids for\n         * columns and widgets in the dashboard.\n         */\n        id: function(){\n          return new Date().getTime() + '-' + (++cid);\n        },\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#idEqual\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Checks if the given ids are equal.\n         *\n         * @param {string} id widget or column id\n         * @param {string} other widget or column id\n         */\n         idEquals: function(id, other){\n           // use toString, because old ids are numbers\n           return ((id) && (other)) && (id.toString() === other.toString());\n         }\n      };\n    };\n\n  });\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf.core')\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\n    'use strict';\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        adfModel: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\n      link: function($scope, $element) {\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n          $compile(columnTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/* global angular */\nangular.module('adf.core')\n  .directive('adfStructurePreview', function(adfTemplatePath) {\n\n    function adjustRowHeight(container){\n      if (container.rows && container.rows.length > 0){\n        var height = 100 / container.rows.length;\n        angular.forEach(container.rows, function(row){\n          row.style = {\n            height: height + '%'\n          }\n\n          if (row.columns){\n            angular.forEach(row.columns, function(column){\n              adjustRowHeight(column);\n            });\n          }\n        });\n      }\n    }\n\n    function prepareStructure($scope){\n      var structure = angular.copy($scope.structure);\n      adjustRowHeight(structure);\n      $scope.preview = structure;\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        name: '=',\n        structure: '=',\n        selected: '='\n      },\n      templateUrl: adfTemplatePath + 'structure-preview.html',\n      link: prepareStructure\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf.core')\n  .directive('adfWidgetContent', function($log, $q, widgetService,\n          $compile, $controller, $injector, dashboard) {\n\n    function renderError($element, msg){\n        $log.warn(msg);\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n    }\n\n    function compileWidget($scope, $element, currentScope) {\n      var model = $scope.model;\n      var content = $scope.content;\n\n      var newScope = currentScope;\n      if (!model){\n        renderError($element, 'model is undefined')\n      } else if (!content){\n        var msg = 'widget content is undefined, please have a look at your browser log';\n        renderError($element, msg);\n      } else {\n        newScope = renderWidget($scope, $element, currentScope, model, content);\n      }\n      return newScope;\n    }\n\n    function renderWidget($scope, $element, currentScope, model, content) {\n      // create new scope\n      var templateScope = $scope.$new();\n\n      // pass config object to scope\n      if (!model.config) {\n        model.config = {};\n      }\n\n      templateScope.config = model.config;\n\n      // local injections\n      var base = {\n        $scope: templateScope,\n        widget: model,\n        config: model.config\n      };\n\n      // get resolve promises from content object\n      var resolvers = {};\n      resolvers.$tpl = widgetService.getTemplate(content);\n      if (content.resolve) {\n        angular.forEach(content.resolve, function(promise, key) {\n          if (angular.isString(promise)) {\n            resolvers[key] = $injector.get(promise);\n          } else {\n            resolvers[key] = $injector.invoke(promise, promise, base);\n          }\n        });\n      }\n\n      // resolve all resolvers\n      $q.all(resolvers).then(function(locals) {\n        angular.extend(locals, base);\n\n        // pass resolve map to template scope as defined in resolveAs\n        if (content.resolveAs){\n          templateScope[content.resolveAs] = locals;\n        }\n\n        // compile & render template\n        var template = locals.$tpl;\n        $element.html(template);\n        if (content.controller) {\n          var templateCtrl = $controller(content.controller, locals);\n          if (content.controllerAs) {\n            templateScope[content.controllerAs] = templateCtrl;\n          }\n          $element.children().data('$ngControllerController', templateCtrl);\n        }\n        $compile($element.contents())(templateScope);\n      }, function(reason) {\n        // handle promise rejection\n        var msg = 'Could not resolve all promises';\n        if (reason) {\n          msg += ': ' + reason;\n        }\n        renderError($element, msg);\n      });\n\n      // destroy old scope\n      if (currentScope) {\n        currentScope.$destroy();\n      }\n\n      return templateScope;\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      scope: {\n        model: '=',\n        content: '='\n      },\n      link: function($scope, $element) {\n        var currentScope = compileWidget($scope, $element, null);\n        $scope.$on('widgetConfigChanged', function() {\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n        $scope.$on('widgetReload', function() {\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n      }\n    };\n\n  });\n","\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf.core')\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\n    'use strict';\n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .success(function(response) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, response);\n                 deferred.resolve(response);\n               })\n               .error(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf.core')\n  .directive('adfWidget', function($injector, $q, $log, dialogService, $rootScope, dashboard, adfTemplatePath) {\n\n    function preLink($scope) {\n      var definition = $scope.definition;\n\n      //passs translate function from dashboard so we can translate labels inside html templates\n      $scope.translate = dashboard.translate;\n\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n          // pass title\n          if (!definition.titleTemplateUrl) {\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n            if (w.titleTemplateUrl) {\n              definition.titleTemplateUrl = w.titleTemplateUrl;\n            }\n          }\n\n          if (!definition.footerTemplateUrl) {\n            definition.footerTemplateUrl = adfTemplatePath + 'widget-footer.html';\n            if (w.footerTemplateUrl) {\n              definition.footerTemplateUrl = w.footerTemplateUrl;\n            }\n          }\n\n          if (!definition.editTemplateUrl) {\n            definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n            if (w.editTemplateUrl) {\n              definition.editTemplateUrl = w.editTemplateUrl;\n            }\n          }\n\n          if (!definition.titleTemplateUrl && !definition.footerTemplateUrl) {\n            definition.frameless = w.frameless;\n          }\n\n          if (!definition.styleClass) {\n            definition.styleClass = w.styleClass;\n          }\n\n          // set id for sortable\n          if (!definition.wid) {\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          // create config object\n          var config = definition.config;\n          if (config) {\n            if (angular.isString(config)) {\n              config = angular.fromJson(config);\n            }\n          } else {\n            config = {};\n          }\n\n          // pass config to scope\n          $scope.config = config;\n\n          // collapse exposed $scope.widgetState property\n          if (!$scope.widgetState) {\n            $scope.widgetState = {};\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\n          }\n\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind close function\n\n        var deleteWidget = function() {\n          var column = $scope.col;\n          if (column) {\n            var index = column.widgets.indexOf(definition);\n            if (index >= 0) {\n              column.widgets.splice(index, 1);\n            }\n          }\n          $element.remove();\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n        };\n\n        $scope.remove = function() {\n          if ($scope.options.enableConfirmDelete) {\n            var deleteScope = $scope.$new();\n            deleteScope.translate = dashboard.translate;\n\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n            if (definition.deleteTemplateUrl) {\n              deleteTemplateUrl = definition.deleteTemplateUrl;\n            }\n            var opts = {\n              scope: deleteScope,\n              templateUrl: deleteTemplateUrl\n            };\n            dialogService.open(opts);\n            deleteScope.closeDialog = function() {\n              dialogService.close(function() {\n                deleteScope.$destroy();\n              });\n            };\n            deleteScope.deleteDialog = function() {\n              deleteWidget();\n              deleteScope.closeDialog();\n            };\n          } else {\n            deleteWidget();\n          }\n        };\n\n        // bind reload function\n        $scope.reload = function() {\n          $scope.$broadcast('widgetReload');\n        };\n\n        // bind edit function\n        $scope.edit = function() {\n          var editScope = $scope.$new();\n          editScope.translate = dashboard.translate;\n          editScope.definition = angular.copy(definition);\n\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n          if (definition.editTemplateUrl) {\n            adfEditTemplatePath = definition.editTemplateUrl;\n          }\n\n          var opts = {\n            scope: editScope,\n            templateUrl: adfEditTemplatePath,\n            backdrop: 'static'\n          };\n\n          dialogService.open(opts);\n\n          editScope.closeDialog = function() {\n            dialogService.close(function() {\n              editScope.$destroy();\n            });\n          };\n\n          // TODO create util method\n          function createApplyPromise(result){\n            var promise;\n            if (typeof result === 'boolean'){\n              var deferred = $q.defer();\n              if (result){\n                deferred.resolve();\n              } else {\n                deferred.reject();\n              }\n              promise = deferred.promise;\n            } else {\n              promise = $q.when(result);\n            }\n            return promise;\n          }\n\n          editScope.saveDialog = function() {\n            // clear validation error\n            editScope.validationError = null;\n\n            // build injection locals\n            var widget = $scope.widget;\n\n            // create a default apply method for widgets\n            // without edit mode\n            // see issue https://goo.gl/KHPQLZ\n            var applyFn;\n            if (widget.edit){\n              applyFn = widget.edit.apply;\n            } else {\n              applyFn = function(){\n                return true;\n              };\n            }\n\n            // injection locals\n            var locals = {\n              widget: widget,\n              definition: editScope.definition,\n              config: editScope.definition.config\n            };\n\n            // invoke apply function and apply if success\n            var result = $injector.invoke(applyFn, applyFn, locals);\n            createApplyPromise(result).then(function(){\n              definition.title = editScope.definition.title;\n              angular.extend(definition.config, editScope.definition.config);\n              if (widget.edit && widget.edit.reload) {\n                // reload content after edit dialog is closed\n                $scope.$broadcast('widgetConfigChanged');\n              }\n              editScope.closeDialog();\n            }, function(err){\n              if (err){\n                editScope.validationError = err;\n              } else {\n                editScope.validationError = 'Validation durring apply failed';\n              }\n            });\n          };\n\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\n      scope: {\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '=',\n        widgetState: '='\n      },\n      controller: function($scope) {\n\n        $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n          $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n        });\n\n        $scope.$on('adfWidgetEnterEditMode', function(event, widget){\n          if (dashboard.idEquals($scope.definition.wid, widget.wid)){\n            $scope.edit();\n          }\n        });\n\n        $scope.widgetClasses = function(w, definition){\n          var classes = definition.styleClass || '';\n          // w is undefined, if the type of the widget is unknown\n          // see issue #216\n          if (!w || !w.frameless || $scope.editMode){\n            classes += ' panel panel-default';\n          }\n          return classes;\n        };\n\n        $scope.openFullScreen = function() {\n          var definition = $scope.definition;\n          var fullScreenScope = $scope.$new();\n          var opts = {\n            scope: fullScreenScope,\n            templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n            size: definition.modalSize || 'lg', // 'sm', 'lg'\n            backdrop: 'static',\n            windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n          };\n\n          dialogService.open(opts);\n          fullScreenScope.closeDialog = function() {\n            dialogService.close(function() {\n              fullScreenScope.$destroy();\n            });\n          };\n        };\n      },\n      compile: function() {\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n  });\n",null,"(function(window, undefined) {'use strict';\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n\nangular.module('adf.core', ['adf.provider', 'adf.locale'])\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n  .value('adfVersion', '0.13.0-SNAPSHOT');\n\nangular.module('adf', ['adf.core', 'ui.bootstrap', 'adf.dialog.bootstrap'])\n  .value('adfTemplatePath', '../src/templates/');\n\nangular.module('adf.material', ['adf.core', 'ngMaterial', 'adf.dialog.ngMaterial'])\n  .value('adfTemplatePath', '../src/templates/material/');\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf.locale', [])\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf.core')\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    \n\n    /**\n     * moves a widget in between a column\n     */\n    function moveWidgetInColumn($scope, column, evt){\n      var widgets = column.widgets;\n      // move widget and apply to scope\n      $scope.$apply(function(){\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\n      });\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (dashboard.idEquals(w.wid,index)){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if (dashboard.idEquals(c.cid, index)){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the adf id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('adf-id');\n      return id ? id : '-1';\n    }\n\n    /**\n     * adds a widget to a column\n     */\n    function addWidgetToColumn($scope, model, targetColumn, evt){\n      // find source column\n      var cid = getId(evt.from);\n      var sourceColumn = findColumn(model, cid);\n\n      if (sourceColumn){\n        // find moved widget\n        var wid = getId(evt.item);\n        var widget = findWidget(sourceColumn, wid);\n\n        if (widget){\n          // add new item and apply to scope\n          $scope.$apply(function(){\n            if (!targetColumn.widgets) {\n              targetColumn.widgets = [];\n            }\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\n\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n          });\n        } else {\n          $log.warn('could not find widget with id ' + wid);\n        }\n      } else {\n        $log.warn('could not find column with id ' + cid);\n      }\n    }\n\n    /**\n     * removes a widget from a column\n     */\n    function removeWidgetFromColumn($scope, column, evt){\n      // remove old item and apply to scope\n      $scope.$apply(function(){\n        column.widgets.splice(evt.oldIndex, 1);\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n      });\n    }\n\n    /**\n     * enable sortable\n     */\n    function applySortable($scope, $element, model, column){\n      // enable drag and drop\n      var el = $element[0];\n      var sortable = Sortable.create(el, {\n        group: 'widgets',\n        handle: '.adf-move',\n        ghostClass: 'placeholder',\n        animation: 150,\n        onAdd: function(evt){\n          addWidgetToColumn($scope, model, column, evt);\n        },\n        onRemove: function(evt){\n          removeWidgetFromColumn($scope, column, evt);\n        },\n        onUpdate: function(evt){\n          moveWidgetInColumn($scope, column, evt);\n        }\n      });\n\n      // destroy sortable on column destroy event\n      $element.on('$destroy', function () {\n        // check sortable element, before calling destroy\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\n        if (sortable.el){\n          sortable.destroy();\n        }\n      });\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid){\n          col.cid = dashboard.id();\n        }\n\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\n          $compile(rowTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        } else {\n          // enable drag and drop for widget only columns\n          applySortable($scope, $element, $scope.adfModel, col);\n        }\n      }\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf.core')\n  .directive('adfDashboard', function ($rootScope, $log, $timeout, $document, dialogService, dashboard, adfTemplatePath) {\n    \n\n    function stringToBoolean(string){\n      switch(angular.isDefined(string) ? string.toLowerCase() : null){\n        case 'true': case 'yes': case '1': return true;\n        case 'false': case 'no': case '0': case null: return false;\n        default: return Boolean(string);\n      }\n    }\n\n    function copyWidgets(source, target) {\n      if ( source.widgets && source.widgets.length > 0 ){\n        var w = source.widgets.shift();\n        while (w){\n          target.widgets.push(w);\n          w = source.widgets.shift();\n        }\n      }\n    }\n\n    /**\n    * Copy widget from old columns to the new model\n    * @param object root the model\n    * @param array of columns\n    * @param counter\n    */\n    function fillStructure(root, columns, counter) {\n      counter = counter || 0;\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (column) {\n            // if the widgets prop doesn't exist, create a new array for it.\n            // this allows ui.sortable to do it's thing without error\n            if (!column.widgets) {\n              column.widgets = [];\n            }\n\n            // if a column exist at the counter index, copy over the column\n            if (angular.isDefined(columns[counter])) {\n              // do not add widgets to a column, which uses nested rows\n              if (angular.isUndefined(column.rows)){\n                copyWidgets(columns[counter], column);\n                counter++;\n              }\n            }\n\n            // run fillStructure again for any sub rows/columns\n            counter = fillStructure(column, columns, counter);\n          });\n        });\n      }\n      return counter;\n    }\n\n    /**\n    * Read Columns: recursively searches an object for the 'columns' property\n    * @param object model\n    * @param array  an array of existing columns; used when recursion happens\n    */\n    function readColumns(root, columns) {\n      columns = columns || [];\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (col) {\n            columns.push(col);\n            // keep reading columns until we can't any more\n            readColumns(col, columns);\n          });\n        });\n      }\n\n      return columns;\n    }\n\n    function changeStructure(model, structure){\n      var columns = readColumns(model);\n      var counter = 0;\n\n      model.rows = angular.copy(structure.rows);\n\n      while ( counter < columns.length ){\n        counter = fillStructure(model, columns, counter);\n      }\n    }\n\n    function createConfiguration(type){\n      var cfg = {};\n      var config = dashboard.widgets[type].config;\n      if (config){\n        cfg = angular.copy(config);\n      }\n      return cfg;\n    }\n\n    /**\n     * Find first widget column in model.\n     *\n     * @param dashboard model\n     */\n    function findFirstWidgetColumn(model){\n      var column = null;\n      if (!angular.isArray(model.rows)){\n        $log.error('model does not have any rows');\n        return null;\n      }\n      for (var i=0; i<model.rows.length; i++){\n        var row = model.rows[i];\n        if (angular.isArray(row.columns)){\n          for (var j=0; j<row.columns.length; j++){\n            var col = row.columns[j];\n            if (!col.rows){\n              column = col;\n              break;\n            }\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * Adds the widget to first column of the model.\n     *\n     * @param dashboard model\n     * @param widget to add to model\n     * @param name name of the dashboard\n     */\n    function addNewWidgetToModel(model, widget, name){\n      if (model){\n        var column = findFirstWidgetColumn(model);\n        if (column){\n          if (!column.widgets){\n            column.widgets = [];\n          }\n          column.widgets.unshift(widget);\n\n          // broadcast added event\n          $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n        } else {\n          $log.error('could not find first widget column');\n        }\n      } else {\n        $log.error('model is undefined');\n      }\n    }\n\n    /**\n     * Checks if the edit mode of the widget should be opened immediately.\n     *\n     * @param widget type\n     */\n    function isEditModeImmediate(type){\n      var widget = dashboard.widgets[type];\n      return widget && widget.edit && widget.edit.immediate;\n    }\n\n    /**\n     * Opens the edit mode of the specified widget.\n     *\n     * @param dashboard scope\n     * @param widget\n     */\n    function openEditMode($scope, widget){\n      // wait some time before fire enter edit mode event\n      $timeout(function(){\n        $scope.$broadcast('adfWidgetEnterEditMode', widget);\n      }, 200);\n    }\n\n    /**\n     * Splits an object into an array multiple objects inside.\n     *\n     * @param object source object\n     * @param size size of array\n     *\n     * @return array of splitted objects\n     */\n    function split(object, size) {\n      var arr = [];\n      var i = 0;\n      angular.forEach(object, function(value, key){\n        var index = i++ % size;\n        if (!arr[index]){\n          arr[index] = {};\n        }\n        arr[index][key] = value;\n      });\n      return arr;\n    }\n\n    /**\n     * Creates object with the category name as key and an array of widgets as value.\n     *\n     * @param widgets array of widgets\n     *\n     * @return array of categories\n     */\n    function createCategories(widgets){\n      var categories = {};\n      angular.forEach(widgets, function(widget, key){\n        var category = widget.category;\n        // if the widget has no category use a default one\n        if (!category){\n          category = 'Miscellaneous';\n        }\n        // push widget to category array\n        if (angular.isUndefined(categories[category])){\n          categories[category] = {widgets: {}};\n        }\n        categories[category].widgets[key] = widget;\n      });\n      return categories;\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude : false,\n      scope: {\n        structure: '@',\n        name: '@',\n        collapsible: '@',\n        editable: '@',\n        editMode: '@',\n        continuousEditMode: '=',\n        maximizable: '@',\n        adfModel: '=',\n        adfWidgetFilter: '=',\n        categories: '@',\n        titleTemplateUrl: '@',\n        editTemplateUrl: '@'\n      },\n      controller: function($scope){\n        var model = {};\n        var structure = {};\n        var widgetFilter = null;\n        var structureName = {};\n        var name = $scope.name;\n\n        // Watching for changes on adfModel\n        $scope.$watch('adfModel', function(oldVal, newVal) {\n          // has model changed or is the model attribute not set\n          if (newVal !== null || (oldVal === null && newVal === null)) {\n            model = $scope.adfModel;\n            widgetFilter = $scope.adfWidgetFilter;\n            if ( ! model || ! model.rows ){\n              structureName = $scope.structure;\n              structure = dashboard.structures[structureName];\n              if (structure){\n                if (model){\n                  model.rows = angular.copy(structure).rows;\n                } else {\n                  model = angular.copy(structure);\n                }\n                model.structure = structureName;\n              } else {\n                $log.error( 'could not find structure ' + structureName);\n              }\n            }\n\n            if (model) {\n              if ($scope.options.titleTemplateUrl) {\n                model.titleTemplateUrl = $scope.options.titleTemplateUrl;\n              } else if (!model.titleTemplateUrl) {\n                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n              }\n              $scope.model = model;\n            } else {\n              $log.error('could not find or create model');\n            }\n          }\n        }, true);\n\n        // edit mode\n        $scope.editMode = false;\n        $scope.editClass = '';\n\n        //passs translate function from dashboard so we can translate labels inside html templates\n        $scope.translate = dashboard.translate;\n\n        function getNewModalScope() {\n          var scope = $scope.$new();\n          //pass translate function to the new scope so we can translate the labels inside the modal dialog\n          scope.translate = dashboard.translate;\n          return scope;\n        }\n\n        $scope.toggleEditMode = function(){\n          $scope.editMode = ! $scope.editMode;\n          if ($scope.editMode){\n            if (!$scope.continuousEditMode) {\n              $scope.modelCopy = angular.copy($scope.adfModel, {});\n              $rootScope.$broadcast('adfIsEditMode');\n            }\n          }\n\n          if (!$scope.editMode){\n            $rootScope.$broadcast('adfDashboardChanged', name, model);\n          }\n        };\n\n        $scope.$on('adfToggleEditMode', function() {\n            $scope.toggleEditMode();\n        });\n\n        $scope.collapseAll = function(collapseExpandStatus){\n          $rootScope.$broadcast('adfDashboardCollapseExpand',{collapseExpandStatus : collapseExpandStatus});\n        };\n\n        $scope.cancelEditMode = function(){\n          $scope.editMode = false;\n          if (!$scope.continuousEditMode) {\n            $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n          }\n          $rootScope.$broadcast('adfDashboardEditsCancelled');\n        };\n\n        // edit dashboard settings\n        $scope.editDashboardDialog = function(){\n          var editDashboardScope = getNewModalScope();\n          // create a copy of our model to avoid changing the settings\n          // if we cancel without saving.\n          editDashboardScope.copy = angular.copy(model);\n\n          // pass dashboard structure to scope\n          editDashboardScope.structures = dashboard.structures;\n\n          // pass split function to scope, to be able to display structures in multiple columns\n          editDashboardScope.split = split;\n\n          var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n          if ($scope.options.editTemplateUrl) {\n            adfEditTemplatePath = $scope.options.editTemplateUrl;\n          } else if (model.editTemplateUrl) {\n            adfEditTemplatePath = model.editTemplateUrl;\n          }\n\n          dialogService.open({\n            controller: function() {},\n            scope: editDashboardScope,\n            templateUrl: adfEditTemplatePath,\n            backdrop: 'static',\n            size: 'lg',\n            parent: angular.element($document.body)\n          });\n          editDashboardScope.changeStructure = function(name, structure) {\n            if (!name) {\n              name = editDashboardScope.model.structure;\n            }\n            if (!structure) {\n              structure = editDashboardScope.structures[name];\n            }\n            changeStructure(editDashboardScope.model, structure);\n            if (model.structure !== name){\n              model.structure = name;\n            }\n          };\n          editDashboardScope.applyDialog = function(){\n            dialogService.close(function() {\n              // copy the new settings back to the model\n              angular.copy(editDashboardScope.copy, model);\n              // close modal and destroy the scope\n              editDashboardScope.$destroy();\n            });\n          };\n          editDashboardScope.cancelDialog = function(){\n            dialogService.close(function() {\n              // close modal and destroy the scope without saving our changes\n              editDashboardScope.$destroy();\n            });\n          };\n        };\n\n        // add widget dialog\n        $scope.addWidgetDialog = function(){\n          var addScope = getNewModalScope();\n          var model = $scope.model;\n          var widgets;\n          if (angular.isFunction(widgetFilter)){\n            widgets = {};\n            angular.forEach(dashboard.widgets, function(widget, type){\n              if (widgetFilter(widget, type, model)){\n                widgets[type] = widget;\n              }\n            });\n          } else {\n            widgets = dashboard.widgets;\n          }\n          addScope.widgets = widgets;\n\n          //pass translate function to the new scope so we can translate the labels inside the modal dialog\n          addScope.translate = $scope.translate;\n\n          // Key-value store to keep track of # of each widget we want to add\n          addScope.selectedWidgets = {};\n\n          // pass createCategories function to scope, if categories option is enabled\n          if ($scope.options.categories){\n            $scope.createCategories = createCategories;\n          }\n\n          var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n          if(model.addTemplateUrl) {\n            adfAddTemplatePath = model.addTemplateUrl;\n          }\n\n          var opts = {\n            scope: addScope,\n            templateUrl: adfAddTemplatePath,\n            backdrop: 'static'\n          };\n\n          dialogService.open(opts);\n          addScope.addWidget = function(widget){\n\n            if (addScope.selectedWidgets[widget]) {\n              addScope.selectedWidgets[widget]++;\n            } else {\n              addScope.selectedWidgets[widget] = 1;\n            }\n          };\n          addScope.removeWidget = function(widget) {\n            if (addScope.selectedWidgets[widget]) {\n              addScope.selectedWidgets[widget]--;\n            } else {\n              addScope.selectedWidgets[widget] = 0;\n            }\n          };\n          addScope.applyDialog = function(){\n            angular.forEach(addScope.selectedWidgets, function(widgetCount, widget) {\n              for (var i = 0; i < widgetCount; i++) {\n                var w = {\n                  type: widget,\n                  config: createConfiguration(widget)\n                }; \n                addNewWidgetToModel(model, w, name);\n              }\n            });\n\n            // close and destroy\n            dialogService.close(function() {\n              addScope.$destroy();\n            });\n          };\n          addScope.closeDialog = function(){\n            // close and destroy\n            dialogService.close(function() {\n              addScope.$destroy();\n            });\n          };\n        };\n\n        $scope.addNewWidgetToModel = addNewWidgetToModel;\n      },\n      link: function ($scope, $element, $attr) {\n        // pass options to scope\n        var options = {\n          name: $attr.name,\n          editable: true,\n          enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\n          maximizable: stringToBoolean($attr.maximizable),\n          collapsible: stringToBoolean($attr.collapsible),\n          categories: stringToBoolean($attr.categories),\n          titleTemplateUrl: $attr.titleTemplateUrl,\n          editTemplateUrl: $attr.editTemplateUrl\n        };\n        if (angular.isDefined($attr.editable)){\n          options.editable = stringToBoolean($attr.editable);\n        }\n        $scope.options = options;\n      },\n      templateUrl: adfTemplatePath + 'dashboard.html'\n    };\n  });\n\nangular.module('adf.dialog.bootstrap', ['ui.bootstrap'])\n  .factory('dialogService', function($uibModal) {\n    \n    var dialog = {};\n    var instance;\n    dialog.open = function(options) {\n      instance = $uibModal.open(options);\n    };\n    dialog.close = function(fn) {\n      fn();\n      instance.close();\n    }\n    return dialog;\n});\nangular.module('adf.dialog.ngMaterial', ['ngMaterial'])\n  .factory('dialogService', function($mdDialog) {\n    \n    var dialog = {};\n    dialog.open = function(options) {\n      $mdDialog.show(options);\n    };\n    dialog.close = function(fn) {\n      fn();\n      $mdDialog.hide();\n    }\n    return dialog;\n});\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n\n/**\n* @ngdoc object\n* @name adf.locale#adfLocale\n* @description\n*\n* Holds settings and values for framework supported locales\n*/\nangular.module('adf.locale')\n.constant('adfLocale',\n  {\n    defaultLocale: 'en-GB',\n    frameworkLocales: {\n      'en-GB': {\n        ADF_COMMON_CLOSE: 'Close',\n        ADF_COMMON_DELETE: 'Delete',\n        ADF_COMMON_TITLE: 'Title',\n        ADF_COMMON_CANCEL: 'Cancel',\n        ADF_COMMON_APPLY: 'Apply',\n        ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\n        ADF_WIDGET_ADD_HEADER: 'Add new widget',\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\n        ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\n        ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget'\n      },\n      'sv-SE': {\n        ADF_COMMON_CLOSE: 'Stäng',\n        ADF_COMMON_DELETE: 'Ta bort',\n        ADF_COMMON_TITLE: 'Titel',\n        ADF_COMMON_CANCEL: 'Avbryt',\n        ADF_COMMON_APPLY: 'Använd',\n        ADF_COMMON_EDIT_DASHBOARD: 'Redigera dashboard',\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Struktur',\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Lägg till ny widget',\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Spara förändringar',\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Slå på redigeringsläge',\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Ångra förändringar',\n        ADF_WIDGET_ADD_HEADER: 'Lägg till ny widget',\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Är du säker på att du vill ta bort denna widget ?',\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Ladda om widget',\n        ADF_WIDGET_TOOLTIP_MOVE: 'Ändra widgets position',\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Stäng widget',\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Öppna widget',\n        ADF_WIDGET_TOOLTIP_EDIT: 'Ändra widget konfigurering',\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Visa widget i fullskärm',\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Ta bort widget'\n      }\n    }\n  }\n);\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf.core')\n  .filter('adfOrderByObjectKey', function($filter) {\n    \n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', ['adf.locale'])\n  .provider('dashboard', function(adfLocale){\n\n    var widgets = {};\n    var widgetsPath = '';\n    var structures = {};\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n    var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\">loading ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n    var customWidgetTemplatePath = null;\n\n    // default apply function of widget.edit.apply\n    var defaultApplyFunction = function(){\n      return true;\n    };\n\n    var activeLocale = adfLocale.defaultLocale;\n    var locales = adfLocale.frameworkLocales;\n\n    function getLocales() {\n      return locales;\n    }\n\n    function getActiveLocale() {\n      return activeLocale;\n    }\n\n    function translate(label) {\n      var translation = locales[activeLocale][label];\n      return translation ? translation : label;\n    }\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#widget\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new widget.\n    *\n    * @param {string} name of the widget\n    * @param {object} widget to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `title` - `{string=}` - The title of the widget.\n    *   - `description` - `{string=}` - Description of the widget.\n    *   - `category` - `{string=}` - Category of the widget.\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n    *   - `config` - `{object}` - Predefined widget configuration.\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\n    *      associated with newly created scope of the widget or the name of a\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n    *      if passed as a string.\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n    *   - `template` - `{string=|function()=}` - html template as a string.\n    *   - `templateUrl` - `{string=}` - path to an html template.\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the widget\n    *      will wait for them all to be resolved or one to be rejected before the controller is\n    *      instantiated.\n    *      If all the promises are resolved successfully, the values of the resolved promises are\n    *      injected.\n    *\n    *      The map object is:\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n    *        and the return value is treated as the dependency. If the result is a promise, it is\n    *        resolved before its value is injected into the controller.\n    *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n    *      on the scope of the widget.\n    *   - `edit` - `{object}` - Edit modus of the widget.\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n    *        on the scope of the widget.\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n    *        Default is true.\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n    *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n    *        The function have to return a boolean or an promise which can be resolved to a boolean.\n    *        The function can use injection.\n    *\n    * @returns {Object} self\n    */\n    this.widget = function(name, widget){\n      var w = angular.extend({reload: false, frameless: false}, widget);\n      if ( w.edit ){\n        var edit = {\n          reload: true,\n          immediate: false,\n          apply: defaultApplyFunction\n        };\n        angular.extend(edit, w.edit);\n        w.edit = edit;\n      }\n      widgets[name] = w;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#widgetsPath\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Sets the path to the directory which contains the widgets. The widgets\n     * path is used for widgets with a templateUrl which contains the\n     * placeholder {widgetsPath}. The placeholder is replaced with the\n     * configured value, before the template is loaded, but the template is\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n     * The default value of widgetPaths is ''.\n     *\n     *\n     * @param {string} path to the directory which contains the widgets\n     *\n     * @returns {Object} self\n     */\n    this.widgetsPath = function(path){\n      widgetsPath = path;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#structure\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new structure.\n    *\n    * @param {string} name of the structure\n    * @param {object} structure to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n    *     - `styleClass` - `{string}` - CSS Class of the row.\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\n    *       - `styleClass` - `{string}` - CSS Class of the column.\n    *\n    * @returns {Object} self\n    */\n    this.structure = function(name, structure){\n      structures[name] = structure;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#messageTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template for messages.\n    *\n    * @param {string} template for messages.\n    *\n    * @returns {Object} self\n    */\n    this.messageTemplate = function(template){\n      messageTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#loadingTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template which is displayed as\n    * long as the widget resources are not resolved.\n    *\n    * @param {string} template loading template\n    *\n    * @returns {Object} self\n    */\n    this.loadingTemplate = function(template){\n      loadingTemplate = template;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#customWidgetTemplatePath\n     * @propertyOf adf.dashboardProvider\n     * @description\n     *\n     * Changes the container template for the widgets\n     *\n     * @param {string} path to the custom widget template\n     *\n     * @returns {Object} self\n     */\n    this.customWidgetTemplatePath = function(templatePath) {\n      customWidgetTemplatePath = templatePath;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#setLocale\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Changes the locale setting of adf\n     *\n     * @param {string} ISO Language Code\n     *\n     * @returns {Object} self\n     */\n     this.setLocale = function(locale){\n       if(locales[locale]) {\n         activeLocale = locale;\n       } else {\n         throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\n       }\n       return this;\n     };\n\n     /**\n      * @ngdoc method\n      * @name adf.dashboardProvider#addLocale\n      * @methodOf adf.dashboardProvider\n      * @description\n      *\n      * Adds a new locale to adf\n      *\n      * @param {string} ISO Language Code for the new locale\n      * @param {object} translations for the locale.\n      *\n      * @returns {Object} self\n      */\n      this.addLocale = function(locale, translations){\n        if(!angular.isString(locale)) {\n          throw new Error('locale must be an string');\n        }\n\n        if(!angular.isObject(translations)) {\n          throw new Error('translations must be an object');\n        }\n\n        locales[locale] = translations;\n        return this;\n      };\n\n   /**\n    * @ngdoc service\n    * @name adf.dashboard\n    * @description\n    *\n    * The dashboard holds all options, structures and widgets.\n    *\n    * @property {Array.<Object>} widgets Array of registered widgets.\n    * @property {string} widgetsPath Default path for widgets.\n    * @property {Array.<Object>} structures Array of registered structures.\n    * @property {string} messageTemplate Template for messages.\n    * @property {string} loadingTemplate Template for widget loading.\n    * @property {method} sets locale of adf.\n    * @property {Array.<Object>} hold all of the locale translations.\n    * @property {string} the active locale setting.\n    * @property {method} translation function passed to templates.\n    *\n    * @returns {Object} self\n    */\n    this.$get = function(){\n      var cid = 0;\n\n      return {\n        widgets: widgets,\n        widgetsPath: widgetsPath,\n        structures: structures,\n        messageTemplate: messageTemplate,\n        loadingTemplate: loadingTemplate,\n        setLocale: this.setLocale,\n        locales: getLocales,\n        activeLocale: getActiveLocale,\n        translate: translate,\n        customWidgetTemplatePath: customWidgetTemplatePath,\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#id\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Creates an ongoing numeric id. The method is used to create ids for\n         * columns and widgets in the dashboard.\n         */\n        id: function(){\n          return new Date().getTime() + '-' + (++cid);\n        },\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#idEqual\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Checks if the given ids are equal.\n         *\n         * @param {string} id widget or column id\n         * @param {string} other widget or column id\n         */\n         idEquals: function(id, other){\n           // use toString, because old ids are numbers\n           return ((id) && (other)) && (id.toString() === other.toString());\n         }\n      };\n    };\n\n  });\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf.core')\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\n    \n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        adfModel: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\n      link: function($scope, $element) {\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n          $compile(columnTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/* global angular */\nangular.module('adf.core')\n  .directive('adfStructurePreview', function(adfTemplatePath) {\n\n    function adjustRowHeight(container){\n      if (container.rows && container.rows.length > 0){\n        var height = 100 / container.rows.length;\n        angular.forEach(container.rows, function(row){\n          row.style = {\n            height: height + '%'\n          }\n\n          if (row.columns){\n            angular.forEach(row.columns, function(column){\n              adjustRowHeight(column);\n            });\n          }\n        });\n      }\n    }\n\n    function prepareStructure($scope){\n      var structure = angular.copy($scope.structure);\n      adjustRowHeight(structure);\n      $scope.preview = structure;\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        name: '=',\n        structure: '=',\n        selected: '='\n      },\n      templateUrl: adfTemplatePath + 'structure-preview.html',\n      link: prepareStructure\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf.core')\n  .directive('adfWidgetContent', function($log, $q, widgetService,\n          $compile, $controller, $injector, dashboard) {\n\n    function renderError($element, msg){\n        $log.warn(msg);\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n    }\n\n    function compileWidget($scope, $element, currentScope) {\n      var model = $scope.model;\n      var content = $scope.content;\n\n      var newScope = currentScope;\n      if (!model){\n        renderError($element, 'model is undefined')\n      } else if (!content){\n        var msg = 'widget content is undefined, please have a look at your browser log';\n        renderError($element, msg);\n      } else {\n        newScope = renderWidget($scope, $element, currentScope, model, content);\n      }\n      return newScope;\n    }\n\n    function renderWidget($scope, $element, currentScope, model, content) {\n      // create new scope\n      var templateScope = $scope.$new();\n\n      // pass config object to scope\n      if (!model.config) {\n        model.config = {};\n      }\n\n      templateScope.config = model.config;\n\n      // local injections\n      var base = {\n        $scope: templateScope,\n        widget: model,\n        config: model.config\n      };\n\n      // get resolve promises from content object\n      var resolvers = {};\n      resolvers.$tpl = widgetService.getTemplate(content);\n      if (content.resolve) {\n        angular.forEach(content.resolve, function(promise, key) {\n          if (angular.isString(promise)) {\n            resolvers[key] = $injector.get(promise);\n          } else {\n            resolvers[key] = $injector.invoke(promise, promise, base);\n          }\n        });\n      }\n\n      // resolve all resolvers\n      $q.all(resolvers).then(function(locals) {\n        angular.extend(locals, base);\n\n        // pass resolve map to template scope as defined in resolveAs\n        if (content.resolveAs){\n          templateScope[content.resolveAs] = locals;\n        }\n\n        // compile & render template\n        var template = locals.$tpl;\n        $element.html(template);\n        if (content.controller) {\n          var templateCtrl = $controller(content.controller, locals);\n          if (content.controllerAs) {\n            templateScope[content.controllerAs] = templateCtrl;\n          }\n          $element.children().data('$ngControllerController', templateCtrl);\n        }\n        $compile($element.contents())(templateScope);\n      }, function(reason) {\n        // handle promise rejection\n        var msg = 'Could not resolve all promises';\n        if (reason) {\n          msg += ': ' + reason;\n        }\n        renderError($element, msg);\n      });\n\n      // destroy old scope\n      if (currentScope) {\n        currentScope.$destroy();\n      }\n\n      return templateScope;\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      scope: {\n        model: '=',\n        content: '='\n      },\n      link: function($scope, $element) {\n        var currentScope = compileWidget($scope, $element, null);\n        $scope.$on('widgetConfigChanged', function() {\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n        $scope.$on('widgetReload', function() {\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n      }\n    };\n\n  });\n\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf.core')\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\n    \n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .success(function(response) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, response);\n                 deferred.resolve(response);\n               })\n               .error(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf.core')\n  .directive('adfWidget', function($injector, $q, $log, dialogService, $rootScope, dashboard, adfTemplatePath) {\n\n    function preLink($scope) {\n      var definition = $scope.definition;\n\n      //passs translate function from dashboard so we can translate labels inside html templates\n      $scope.translate = dashboard.translate;\n\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n          // pass title\n          if (!definition.titleTemplateUrl) {\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n            if (w.titleTemplateUrl) {\n              definition.titleTemplateUrl = w.titleTemplateUrl;\n            }\n          }\n\n          if (!definition.footerTemplateUrl) {\n            definition.footerTemplateUrl = adfTemplatePath + 'widget-footer.html';\n            if (w.footerTemplateUrl) {\n              definition.footerTemplateUrl = w.footerTemplateUrl;\n            }\n          }\n\n          if (!definition.editTemplateUrl) {\n            definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n            if (w.editTemplateUrl) {\n              definition.editTemplateUrl = w.editTemplateUrl;\n            }\n          }\n\n          if (!definition.titleTemplateUrl && !definition.footerTemplateUrl) {\n            definition.frameless = w.frameless;\n          }\n\n          if (!definition.styleClass) {\n            definition.styleClass = w.styleClass;\n          }\n\n          // set id for sortable\n          if (!definition.wid) {\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          // create config object\n          var config = definition.config;\n          if (config) {\n            if (angular.isString(config)) {\n              config = angular.fromJson(config);\n            }\n          } else {\n            config = {};\n          }\n\n          // pass config to scope\n          $scope.config = config;\n\n          // collapse exposed $scope.widgetState property\n          if (!$scope.widgetState) {\n            $scope.widgetState = {};\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\n          }\n\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind close function\n\n        var deleteWidget = function() {\n          var column = $scope.col;\n          if (column) {\n            var index = column.widgets.indexOf(definition);\n            if (index >= 0) {\n              column.widgets.splice(index, 1);\n            }\n          }\n          $element.remove();\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n        };\n\n        $scope.remove = function() {\n          if ($scope.options.enableConfirmDelete) {\n            var deleteScope = $scope.$new();\n            deleteScope.translate = dashboard.translate;\n\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n            if (definition.deleteTemplateUrl) {\n              deleteTemplateUrl = definition.deleteTemplateUrl;\n            }\n            var opts = {\n              scope: deleteScope,\n              templateUrl: deleteTemplateUrl\n            };\n            dialogService.open(opts);\n            deleteScope.closeDialog = function() {\n              dialogService.close(function() {\n                deleteScope.$destroy();\n              });\n            };\n            deleteScope.deleteDialog = function() {\n              deleteWidget();\n              deleteScope.closeDialog();\n            };\n          } else {\n            deleteWidget();\n          }\n        };\n\n        // bind reload function\n        $scope.reload = function() {\n          $scope.$broadcast('widgetReload');\n        };\n\n        // bind edit function\n        $scope.edit = function() {\n          var editScope = $scope.$new();\n          editScope.translate = dashboard.translate;\n          editScope.definition = angular.copy(definition);\n\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n          if (definition.editTemplateUrl) {\n            adfEditTemplatePath = definition.editTemplateUrl;\n          }\n\n          var opts = {\n            scope: editScope,\n            templateUrl: adfEditTemplatePath,\n            backdrop: 'static'\n          };\n\n          dialogService.open(opts);\n\n          editScope.closeDialog = function() {\n            dialogService.close(function() {\n              editScope.$destroy();\n            });\n          };\n\n          // TODO create util method\n          function createApplyPromise(result){\n            var promise;\n            if (typeof result === 'boolean'){\n              var deferred = $q.defer();\n              if (result){\n                deferred.resolve();\n              } else {\n                deferred.reject();\n              }\n              promise = deferred.promise;\n            } else {\n              promise = $q.when(result);\n            }\n            return promise;\n          }\n\n          editScope.saveDialog = function() {\n            // clear validation error\n            editScope.validationError = null;\n\n            // build injection locals\n            var widget = $scope.widget;\n\n            // create a default apply method for widgets\n            // without edit mode\n            // see issue https://goo.gl/KHPQLZ\n            var applyFn;\n            if (widget.edit){\n              applyFn = widget.edit.apply;\n            } else {\n              applyFn = function(){\n                return true;\n              };\n            }\n\n            // injection locals\n            var locals = {\n              widget: widget,\n              definition: editScope.definition,\n              config: editScope.definition.config\n            };\n\n            // invoke apply function and apply if success\n            var result = $injector.invoke(applyFn, applyFn, locals);\n            createApplyPromise(result).then(function(){\n              definition.title = editScope.definition.title;\n              angular.extend(definition.config, editScope.definition.config);\n              if (widget.edit && widget.edit.reload) {\n                // reload content after edit dialog is closed\n                $scope.$broadcast('widgetConfigChanged');\n              }\n              editScope.closeDialog();\n            }, function(err){\n              if (err){\n                editScope.validationError = err;\n              } else {\n                editScope.validationError = 'Validation durring apply failed';\n              }\n            });\n          };\n\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\n      scope: {\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '=',\n        widgetState: '='\n      },\n      controller: function($scope) {\n\n        $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n          $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n        });\n\n        $scope.$on('adfWidgetEnterEditMode', function(event, widget){\n          if (dashboard.idEquals($scope.definition.wid, widget.wid)){\n            $scope.edit();\n          }\n        });\n\n        $scope.widgetClasses = function(w, definition){\n          var classes = definition.styleClass || '';\n          // w is undefined, if the type of the widget is unknown\n          // see issue #216\n          if (!w || !w.frameless || $scope.editMode){\n            classes += ' panel panel-default';\n          }\n          return classes;\n        };\n\n        $scope.openFullScreen = function() {\n          var definition = $scope.definition;\n          var fullScreenScope = $scope.$new();\n          var opts = {\n            scope: fullScreenScope,\n            templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n            size: definition.modalSize || 'lg', // 'sm', 'lg'\n            backdrop: 'static',\n            windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n          };\n\n          dialogService.open(opts);\n          fullScreenScope.closeDialog = function() {\n            dialogService.close(function() {\n              fullScreenScope.$destroy();\n            });\n          };\n        };\n      },\n      compile: function() {\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n  });\n\nangular.module(\"adf.core\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column ng-class=column.styleClass ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column edit-mode=editMode options=options widget-state=widgetState>  </adf-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title ng-bind=\\\"translate(\\'ADF_COMMON_EDIT_DASHBOARD\\')\\\">Edit Dashboard</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=dashboardTitle ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text class=form-control id=dashboardTitle ng-model=copy.title required> </div> <div class=form-group> <label ng-bind=\\\"translate(\\'ADF_EDIT_DASHBOARD_STRUCTURE_LABEL\\')\\\">Structure</label> <div class=row ng-init=\\\"splitted = split(structures, 3)\\\"> <div class=col-lg-4 ng-repeat=\\\"structureColumn in splitted\\\"> <div class=radio ng-repeat=\\\"(key, structure) in structureColumn\\\"> <div class=row> <div class=col-sm-2> <label> <input type=radio value={{key}} ng-model=model.structure ng-change=\\\"changeStructure(key, structure)\\\"> </label> </div> <div class=col-sm-9 ng-click=\\\"changeStructure(key, structure)\\\"> <adf-structure-preview name=key structure=structure selected=\\\"model.structure == key\\\"> </adf-structure-preview> </div> </div> </div> </div> </div> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass ng-style=row.style>  </div> \");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<h1> {{model.title}} <span style=\\\"font-size: 16px\\\" class=pull-right> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_ADD\\') }}\\\" ng-click=addWidgetDialog()> <i class=\\\"glyphicon glyphicon-plus-sign\\\"></i> </a> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_COMMON_EDIT_DASHBOARD\\') }}\\\" ng-click=editDashboardDialog()> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href ng-if=options.editable title=\\\"{{editMode ? translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_SAVE\\') : translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE\\') }}\\\" ng-click=toggleEditMode()> <i class=glyphicon x-ng-class=\\\"{\\'glyphicon-edit\\' : !editMode, \\'glyphicon-save\\' : editMode}\\\"></i> </a> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_UNDO\\') }}\\\" ng-click=cancelEditMode()> <i class=\\\"glyphicon glyphicon-repeat adf-flip\\\"></i> </a> </span> </h1> \");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <adf-dashboard-row row=row adf-model=model options=options ng-repeat=\\\"row in model.rows\\\" edit-mode=editMode continuous-edit-mode=continuousEditMode> </adf-dashboard-row></div> </div> \");\n$templateCache.put(\"../src/templates/structure-preview.html\",\"<div class=structure-preview ng-class=\\\"{selected: selected}\\\"> <h4>{{name}}</h4> <adf-dashboard-row ng-repeat=\\\"row in preview.rows\\\" row=row> </adf-dashboard-row></div> \");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title ng-bind=\\\"translate(\\'ADF_WIDGET_ADD_HEADER\\')\\\">Add new widget</h4> </div> <div class=modal-body>  <div ng-if=createCategories> <uib-accordion ng-init=\\\"categorized = createCategories(widgets)\\\"> <uib-accordion-group heading={{category.name}} ng-repeat=\\\"category in categorized | adfOrderByObjectKey: \\'name\\'\\\"> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"widget in category.widgets | adfOrderByObjectKey: \\'key\\'\\\"> <a href ng-click=addWidget(widget.key)> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> </uib-accordion-group> </uib-accordion> </div>  <div style=\\\"display: inline-block;\\\" ng-if=!createCategories> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"widget in widgets | adfOrderByObjectKey: \\'key\\'\\\"> <a href ng-click=addWidget(widget.key)> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title><span ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</span> {{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_WIDGET_DELETE_CONFIRM_MESSAGE\\')\\\">Are you sure you want to delete this widget ?</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog() ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<form name=widgetEditForm novalidate role=form ng-submit=saveDialog()> <div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>{{widget.title}}</h4> </div> <div class=modal-body> <div class=\\\"alert alert-danger\\\" role=alert ng-show=validationError> <strong>Apply error:</strong> {{validationError}} </div> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text class=form-control id=widgetTitle ng-model=definition.title placeholder=\\\"Enter title\\\" required> </div> <div ng-if=widget.edit> <adf-widget-content model=definition content=widget.edit> </adf-widget-content></div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CANCEL\\')\\\">Cancel</button> <input type=submit class=\\\"btn btn-primary\\\" ng-disabled=widgetEditForm.$invalid ng-value=\\\"translate(\\'ADF_COMMON_APPLY\\')\\\"> </div> </form> \");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REFRESH\\') }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a> <a href title=close ng-click=closeDialog()> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </div> <h4 class=modal-title>{{definition.title}}</h4> </div> <div class=modal-body> <adf-widget-content model=definition content=widget> </adf-widget-content></div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-title.html\",\"<h3 class=panel-title> {{definition.title}} <span class=pull-right> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REFRESH\\') }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_MOVE\\') }}\\\" class=adf-move ng-if=editMode> <i class=\\\"glyphicon glyphicon-move\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_COLLAPSE\\') }}\\\" ng-show=\\\"options.collapsible && !widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-minus\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_EXPAND\\') }}\\\" ng-show=\\\"options.collapsible && widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-plus\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_EDIT\\') }}\\\" ng-click=edit() ng-if=editMode> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_FULLSCREEN\\') }}\\\" ng-click=openFullScreen() ng-show=options.maximizable> <i class=\\\"glyphicon glyphicon-fullscreen\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REMOVE\\') }}\\\" ng-click=remove() ng-if=editMode> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </span> </h3> \");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"widgetClasses(widget, definition)\\\" class=widget> <div class=\\\"panel-heading clearfix\\\" ng-if=\\\"!widget.frameless || editMode\\\"> <div ng-include src=definition.titleTemplateUrl></div> </div> <div ng-class=\\\"{\\'panel-body\\':!widget.frameless || editMode}\\\" uib-collapse=widgetState.isCollapsed> <adf-widget-content model=definition content=widget> </adf-widget-content></div> </div> \");\n$templateCache.put(\"../src/templates/material/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column ng-class=column.styleClass ng-model=column.widgets flex={{column.flex}}> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column edit-mode=editMode options=options widget-state=widgetState>  </adf-widget></div> \");\n$templateCache.put(\"../src/templates/material/dashboard-edit.html\",\"<md-dialog aria-label=dashboard-edit flex> <form> <md-toolbar> <div class=md-toolbar-tools> <h2>Edit Dashboard</h2> <span flex></span> <md-button ng-click=cancelDialog()>X</md-button> </div> </md-toolbar> <md-dialog-content> <div class=md-dialog-content layout=column> <md-list> <md-list-item> <md-input-container flex> <label ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text id=dashboardTitle ng-model=copy.title required> </md-input-container> </md-list-item> <md-list-item> <md-input-container class=md-input-has-value flex> <label ng-bind=\\\"translate(\\'ADF_EDIT_DASHBOARD_STRUCTURE_LABEL\\')\\\">Structure</label> <br> <md-radio-group ng-model=model.structure ng-change=changeStructure() layout=row layout-wrap layout-padding> <md-radio-button ng-repeat=\\\"(key, structure) in structures\\\" ng-value=key flex-gt-sm=45> <adf-structure-preview name=key structure=structure selected=\\\"model.structure == key\\\"> </adf-structure-preview> </md-radio-button> </md-radio-group> </md-input-container> </md-list-item> </md-list> </div></md-dialog-content> <md-dialog-actions layout=row> <md-button type=button class=primary ng-click=applyDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Apply</md-button> </md-dialog-actions> </form> </md-dialog> \");\n$templateCache.put(\"../src/templates/material/dashboard-row.html\",\"<div class=row layout-gt-sm=row layout=column flex ng-class=row.styleClass ng-style=row.style>  </div> \");\n$templateCache.put(\"../src/templates/material/dashboard-title.html\",\"<h1 layout=row flex> <span flex ng-show=model.title>{{model.title}}</span> <span flex></span> <span style=\\\"font-size: 20px\\\"> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_ADD\\') }}\\\" ng-click=addWidgetDialog()> <i class=material-icons>note_add</i> </a> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_COMMON_EDIT_DASHBOARD\\') }}\\\" ng-click=editDashboardDialog()> <i class=material-icons>settings</i> </a> <a href ng-if=options.editable title=\\\"{{editMode ? translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_SAVE\\') : translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE\\') }}\\\" ng-click=toggleEditMode()> <i ng-show=!editMode class=material-icons>mode_edit</i> <i ng-show=editMode class=material-icons>save</i> </a> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_UNDO\\') }}\\\" ng-click=cancelEditMode()> <i class=material-icons>undo</i> </a> </span> </h1> \");\n$templateCache.put(\"../src/templates/material/dashboard.html\",\"<div class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <adf-dashboard-row row=row adf-model=model options=options ng-repeat=\\\"row in model.rows\\\" edit-mode=editMode continuous-edit-mode=continuousEditMode> </adf-dashboard-row></div> </div> \");\n$templateCache.put(\"../src/templates/material/structure-preview.html\",\"<div class=structure-preview ng-class=\\\"{selected: selected}\\\"> <h4>{{name}}</h4> <adf-dashboard-row ng-repeat=\\\"row in preview.rows\\\" row=row> </adf-dashboard-row></div> \");\n$templateCache.put(\"../src/templates/material/widget-add.html\",\"<md-dialog aria-label=widget-add> <md-toolbar> <div class=md-toolbar-tools> <h2>Add New Widgets</h2> <span flex></span> <md-button ng-click=closeDialog()>X</md-button> </div> </md-toolbar> <md-dialog-content> <div class=md-dialog-content> <div ng-if=createCategories> <md-list flex ng-init=\\\"categorized = createCategories(widget)\\\"> <md-subheader class=md-no-sticky ng-repeat=\\\"category in categorized | adfOrderByObjectKey: \\'name\\'\\\">{{category.name}}</md-subheader> <md-list-item ng-repeat=\\\"widget in category.widgets | adfOrderByObjectKey: \\'key\\'\\\"> <div class=md-list-item-text> <h3>{{widget.title}}</h3> <p>{{widget.description}}</p> </div> <md-button ng-click=addWidget(widget.key)> <i class=material-icons>node_add</i> </md-button> </md-list-item> </md-list> </div> <div ng-if=!createCategories> <md-list flex> <md-list-item class=md-3-line ng-repeat=\\\"widget in widgets | adfOrderByObjectKey: \\'key\\'\\\"> <div class=md-list-item-text> <h3>{{widget.title}}</h3> <p>{{widget.description}}</p> </div> <md-button class=md-secondary aria-label=\\\"Add Widget\\\" ng-click=addWidget(widget.key)> <md-icon style=\\\"font-size: 24px;\\\">add_circle_outline</md-icon> </md-button> <div class=md-secondary><h2>{{ selectedWidgets[widget.key] || \\'0\\' }}</h2></div> <md-button class=md-secondary aria-label=\\\"Remove Widget\\\" ng-click=removeWidget(widget.key)> <md-icon style=\\\"font-size: 24px;\\\">remove_circle_outline</md-icon> </md-button> <md-divider ng-if=!$last></md-divider> </md-list-item> </md-list> </div> </div> </md-dialog-content> <md-dialog-actions layout=row> <md-button type=button class=primary ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</md-button> <md-button type=button class=accent ng-click=applyDialog() ng-bind=\\\"translate(\\'ADF_COMMON_APPLY\\')\\\">Apply</md-button> </md-dialog-actions> </md-dialog>\");\n$templateCache.put(\"../src/templates/material/widget-delete.html\",\"<md-dialog aria-label=widget-delete> <md-toolbar> <div class=md-toolbar-tools> <h2><span ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</span> {{widget.title}}</h2> </div> </md-toolbar> <md-dialog-content> <div class=md-dialog-content> <form role=form> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_WIDGET_DELETE_CONFIRM_MESSAGE\\')\\\">Are you sure you want to delete this widget ?</label> </div> </form> </div> </md-dialog-content> <md-dialog-actions layout=row> <md-button type=button ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</md-button> <md-button type=button class=primary ng-click=deleteDialog() ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</md-button> </md-dialog-actions> </md-dialog>\");\n$templateCache.put(\"../src/templates/material/widget-edit.html\",\"<md-dialog aria-label=widget-edit flex=nogrow class=widget-edit-dialog> <form name=widgetEditForm novalidate role=form ng-submit=saveDialog()> <md-toolbar> <div class=md-toolbar-tools> <h2>Edit {{widget.title}} Widget</h2> <span flex></span> <md-button ng-click=closeDialog()>X</md-button> </div> </md-toolbar> <md-dialog-content> <div class=md-dialog-content> <div ng-if=widget.edit> <adf-widget-content model=definition content=widget.edit> </adf-widget-content></div> </div> </md-dialog-content> <md-dialog-actions layout=row> <md-button type=button ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CANCEL\\')\\\">Cancel</md-button> <md-button type=submit ng-disabled=widgetEditForm.$invalid ng-value=\\\"translate(\\'ADF_COMMON_APPLY\\')\\\">Apply</md-button> </md-dialog-actions> </form> </md-dialog>\");\n$templateCache.put(\"../src/templates/material/widget-footer.html\",\"<h3 layout=row flex> <span flex></span> <span class=edit-icons-container> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REFRESH\\') }}\\\" ng-if=widget.reload ng-click=reload()> <i class=material-icons>refresh</i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_COLLAPSE\\') }}\\\" ng-show=\\\"options.collapsible && !widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=material-icons>get_app</i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_EXPAND\\') }}\\\" ng-show=\\\"options.collapsible && widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=material-icons>open_in_browser</i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_EDIT\\') }}\\\" ng-click=edit() ng-if=editMode> <i class=material-icons>mode_edit</i> </a> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_FULLSCREEN\\') }}\\\" ng-click=openFullScreen() ng-show=options.maximizable> <i class=material-icons>all_out</i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REMOVE\\') }}\\\" ng-click=remove() ng-if=editMode> <i class=material-icons>delete</i> </a> </span> </h3> \");\n$templateCache.put(\"../src/templates/material/widget-fullscreen.html\",\"<md-dialog aria-label=widget-fullscreen> <md-toolbar> <div class=md-toolbar-tools> <h2>{{definition.title}}</h2> <span flex></span> <md-button ng-click=closeDialog()>X</md-button> </div> </md-toolbar> <md-dialog-content> <div class=md-dialog-content> <adf-widget-content model=definition content=widget> </adf-widget-content></div> </md-dialog-content> <md-dialog-actions layout=row> <md-button type=button class=primary ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close </md-button></md-dialog-actions> </md-dialog>\");\n$templateCache.put(\"../src/templates/material/widget-title.html\",\"<h3 layout=row ng-class=\\\"{ \\'adf-move\\': editMode }\\\" flex> <span flex ng-show=definition.title>{{definition.title}}</span> <span flex></span> <span class=edit-icons-container>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_MOVE\\') }}\\\" ng-if=editMode> <i class=material-icons>open_with</i> </a> </span> </h3> \");\n$templateCache.put(\"../src/templates/material/widget.html\",\"<md-card adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"widgetClasses(widget, definition)\\\" class=widget> <md-card-title ng-if=\\\"!widget.frameless || editMode\\\"> <md-card-title-text> <div ng-include src=definition.titleTemplateUrl></div> </md-card-title-text> </md-card-title> <md-card-content> <adf-widget-content model=definition content=widget> </adf-widget-content></md-card-content> <md-card-footer ng-if=\\\"!widget.frameless || editMode\\\" ng-show=editMode> <md-card-footer-text> <div ng-include src=definition.footerTemplateUrl></div> </md-card-footer-text> </md-card-footer> </md-card> \");}]);\n})(window);"]}